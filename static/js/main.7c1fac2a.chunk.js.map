{"version":3,"sources":["config.js","App/layout/Loader/index.js","hoc/_Aux/index.js","App/layout/ScrollToTop/index.js","route.js","App/index.js","serviceWorker.js","store/reducer.js","index.js","store/actions.js"],"names":["defaultPath","basename","layout","preLayout","collapseMenu","layoutType","navIconColor","headerBackColor","navBackColor","navBrandColor","navBackImage","rtlLayout","navFixedLayout","headerFixedLayout","boxLayout","navDropdownIcon","navListIcon","navActiveListColor","navListTitleColor","navListTitleHide","configBlock","layout6Background","layout6BackSize","loader","React","createElement","className","Aux","props","children","ScrollToTop","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","prevProps","this","location","window","scrollTo","Component","withRouter","route","path","exact","name","component","lazy","AdminLayout","Loadable","loading","Loader","App","_Component","menu","routes","map","index","Route","render","Suspense","fallback","Switch","Boolean","hostname","match","initialState","_objectSpread","isOpen","isTrigger","config","isFullScreen","reducer","state","length","undefined","action","trigger","open","type","actionTypes","triggerIndex","indexOf","id","filter","item","concat","_toConsumableArray","store","createStore","app","Provider","BrowserRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","COLLAPSE_MENU","COLLAPSE_TOGGLE","FULL_SCREEN","FULL_SCREEN_EXIT","CHANGE_LAYOUT","NAV_CONTENT_LEAVE","NAV_COLLAPSE_LEAVE"],"mappings":"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","file":"static/js/main.7c1fac2a.chunk.js","sourcesContent":["export default {\n    defaultPath: '/dashboard/default',\n    basename: '/datta-able/react/default', // only at build time to set, like /datta-able\n    layout: 'vertical', // vertical, horizontal (not available in lite version)\n    preLayout: null, // (not available in lite version)\n    collapseMenu: false, // mini-menu\n    layoutType: 'menu-light', // menu-dark, (menu-light, dark are not available in lite version)\n    navIconColor: false,\n    headerBackColor: 'header-default', // header-default, (header-blue, header-red, header-purple, header-lightblue, header-dark are not available in lite version)\n    navBackColor: 'navbar-default', // navbar-default, (navbar-blue, navbar-red, navbar-purple, navbar-lightblue, navbar-dark are not available in lite version)\n    navBrandColor: 'brand-default', // brand-default, (brand-blue, brand-red, brand-purple, brand-lightblue, brand-dark are not available in lite version)\n    navBackImage: false, // not available in lite version\n    rtlLayout: false, // not available in lite version\n    navFixedLayout: true,\n    headerFixedLayout: false, // not available in lite version\n    boxLayout: false,\n    navDropdownIcon: 'style1', // style1, (style2, style3 are not available in lite version)\n    navListIcon: 'style1', // style1, (style2, style3, style4, style5, style6 are not available in lite version)\n    navActiveListColor: 'active-default', // active-default, (active-blue, active-red, active-purple, active-lightblue, active-dark are not available in lite version)\n    navListTitleColor: 'title-default', // title-default, (title-blue, title-red, title-purple, title-lightblue, title-dark are not available in lite version)\n    navListTitleHide: false, // not available in lite version\n    configBlock: false, // not available in lite version\n    layout6Background : 'linear-gradient(to right, #A445B2 0%, #D41872 52%, #FF0066 100%)', // used only for pre-layout = layout-6\n    layout6BackSize : '', // used only for pre-layout = layout-6\n};\n","import React from 'react';\n\nconst loader = () => {\n    return (\n        <div className=\"loader-bg\">\n            <div className=\"loader-track\">\n                <div className=\"loader-fill\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default loader;","const Aux = (props) => props.children;\n\nexport default Aux;","import React from 'react';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends React.Component {\n    componentDidUpdate(prevProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0)\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\n\nconst SignUp1 = React.lazy(() => import('./Demo/Authentication/SignUp/SignUp1'));\nconst Signin1 = React.lazy(() => import('./Demo/Authentication/SignIn/SignIn1'));\n\nconst route = [\n    { path: '/auth/signup-1', exact: true, name: 'Signup 1', component: SignUp1 },\n    { path: '/auth/signin-1', exact: true, name: 'Signin 1', component: Signin1 }\n];\n\nexport default route;","import React, { Component, Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nimport '../../node_modules/font-awesome/scss/font-awesome.scss';\n\nimport Loader from './layout/Loader'\nimport Aux from \"../hoc/_Aux\";\nimport ScrollToTop from './layout/ScrollToTop';\nimport routes from \"../route\";\n\nconst AdminLayout = Loadable({\n    loader: () => import('./layout/AdminLayout'),\n    loading: Loader\n});\n\nclass App extends Component {\n    render() {\n        const menu = routes.map((route, index) => {\n          return (route.component) ? (\n              <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                      <route.component {...props} />\n                  )} />\n          ) : (null);\n        });\n\n        return (\n            <Aux>\n                <ScrollToTop>\n                    <Suspense fallback={<Loader/>}>\n                        <Switch>\n                            {menu}\n                            <Route path=\"/\" component={AdminLayout} />\n                        </Switch>\n                    </Suspense>\n                </ScrollToTop>\n            </Aux>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\nimport config from './../config';\n\nconst initialState = {\n    isOpen: [], //for active default menu\n    isTrigger: [], //for active default menu, set blank for horizontal\n    ...config,\n    isFullScreen: false, // static can't change\n};\n\nconst reducer = (state = initialState, action) => {\n    let trigger = [];\n    let open = [];\n\n    switch (action.type) {\n        case actionTypes.COLLAPSE_MENU:\n            return {\n                ...state,\n                collapseMenu: !state.collapseMenu\n            };\n        case actionTypes.COLLAPSE_TOGGLE:\n            if (action.menu.type === 'sub') {\n                open = state.isOpen;\n                trigger = state.isTrigger;\n\n                const triggerIndex = trigger.indexOf(action.menu.id);\n                if (triggerIndex > -1) {\n                    open = open.filter(item => item !== action.menu.id);\n                    trigger = trigger.filter(item => item !== action.menu.id);\n                }\n\n                if (triggerIndex === -1) {\n                    open = [...open, action.menu.id];\n                    trigger = [...trigger, action.menu.id];\n                }\n            } else {\n                open = state.isOpen;\n                const triggerIndex = (state.isTrigger).indexOf(action.menu.id);\n                trigger = (triggerIndex === -1) ? [action.menu.id] : [];\n                open = (triggerIndex === -1) ? [action.menu.id] : [];\n            }\n\n            return {\n                ...state,\n                isOpen: open,\n                isTrigger: trigger\n            };\n        case actionTypes.NAV_CONTENT_LEAVE:\n            return {\n                ...state,\n                isOpen: open,\n                isTrigger: trigger,\n            };\n        case actionTypes.NAV_COLLAPSE_LEAVE:\n            if (action.menu.type === 'sub') {\n                open = state.isOpen;\n                trigger = state.isTrigger;\n\n                const triggerIndex = trigger.indexOf(action.menu.id);\n                if (triggerIndex > -1) {\n                    open = open.filter(item => item !== action.menu.id);\n                    trigger = trigger.filter(item => item !== action.menu.id);\n                }\n                return {\n                    ...state,\n                    isOpen: open,\n                    isTrigger: trigger,\n                };\n            }\n            return {...state};\n        case actionTypes.FULL_SCREEN :\n            return {\n                ...state,\n                isFullScreen: !state.isFullScreen\n            };\n        case actionTypes.FULL_SCREEN_EXIT:\n            return {\n                ...state,\n                isFullScreen: false\n            };\n        case actionTypes.CHANGE_LAYOUT:\n            return {\n                ...state,\n                layout: action.layout\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport App from './App/index';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport config from './config';\n\nconst store = createStore(reducer);\n\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={config.basename}>\n            {/* basename=\"/datta-able\" */}\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const COLLAPSE_MENU = 'COLLAPSE_MENU';\nexport const COLLAPSE_TOGGLE = 'COLLAPSE_TOGGLE';\nexport const FULL_SCREEN = 'FULL_SCREEN';\nexport const FULL_SCREEN_EXIT = 'FULL_SCREEN_EXIT';\nexport const CHANGE_LAYOUT = 'CHANGE_LAYOUT';\nexport const NAV_CONTENT_LEAVE = 'NAV_CONTENT_LEAVE';\nexport const NAV_COLLAPSE_LEAVE = 'NAV_COLLAPSE_LEAVE';"],"sourceRoot":""}